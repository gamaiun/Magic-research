[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-assistant"
version = "1.0.0"
description = "A Retrieval-Augmented Generation (RAG) system for academic research on historical texts"
readme = "README.md"
license = {text = "CC-BY-NC-SA-4.0"}
authors = [
    {name = "RAG Assistant Contributors", email = "contributors@example.com"},
]
maintainers = [
    {name = "Main Maintainer", email = "maintainer@example.com"},
]
keywords = [
    "rag", 
    "retrieval-augmented-generation", 
    "academic-research", 
    "nlp", 
    "semantic-search", 
    "vector-database",
    "medieval-history",
    "digital-humanities"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Education",
    "License :: Free for non-commercial use",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = ">=3.11"
dependencies = [
    "annotated-types==0.7.0",
    "anyio==4.10.0",
    "asgiref==3.9.1",
    "attrs==25.3.0",
    "backoff==2.2.1",
    "bcrypt==4.3.0",
    "build==1.3.0",
    "cachetools==5.5.2",
    "certifi==2025.8.3",
    "charset-normalizer==3.4.3",
    "chromadb==1.0.12",
    "click==8.2.1",
    "coloredlogs==15.0.1",
    "distro==1.9.0",
    "durationpy==0.10",
    "fastapi==0.115.9",
    "filelock==3.19.1",
    "filetype==1.2.0",
    "flatbuffers==25.2.10",
    "fsspec==2025.9.0",
    "google-ai-generativelanguage==0.6.18",
    "google-api-core==2.25.1",
    "google-auth==2.40.3",
    "googleapis-common-protos==1.70.0",
    "groq==0.31.1",
    "grpcio==1.74.0",
    "grpcio-status==1.74.0",
    "h11==0.16.0",
    "hf-xet==1.1.9",
    "httpcore==1.0.9",
    "httptools==0.6.4",
    "httpx==0.28.1",
    "huggingface-hub==0.34.4",
    "humanfriendly==10.0",
    "idna==3.10",
    "importlib_metadata==8.7.0",
    "importlib_resources==6.5.2",
    "Jinja2==3.1.6",
    "jiter==0.10.0",
    "joblib==1.5.2",
    "jsonpatch==1.33",
    "jsonpointer==3.0.0",
    "jsonschema==4.25.1",
    "jsonschema-specifications==2025.9.1",
    "kubernetes==33.1.0",
    "langchain==0.3.27",
    "langchain-core==0.3.76",
    "langchain-google-genai==2.1.10",
    "langchain-groq==0.3.8",
    "langchain-openai==0.3.33",
    "langchain-text-splitters==0.3.11",
    "langsmith==0.4.27",
    "markdown-it-py==4.0.0",
    "MarkupSafe==3.0.2",
    "mdurl==0.1.2",
    "mmh3==5.2.0",
    "mpmath==1.3.0",
    "networkx==3.5",
    "numpy==2.3.3",
    "oauthlib==3.3.1",
    "onnxruntime==1.22.1",
    "openai==1.107.1",
    "opentelemetry-api==1.36.0",
    "opentelemetry-exporter-otlp-proto-common==1.36.0",
    "opentelemetry-exporter-otlp-proto-grpc==1.36.0",
    "opentelemetry-instrumentation==0.57b0",
    "opentelemetry-instrumentation-asgi==0.57b0",
    "opentelemetry-instrumentation-fastapi==0.57b0",
    "opentelemetry-proto==1.36.0",
    "opentelemetry-sdk==1.36.0",
    "opentelemetry-semantic-conventions==0.57b0",
    "opentelemetry-util-http==0.57b0",
    "orjson==3.11.3",
    "overrides==7.7.0",
    "packaging==25.0",
    "pillow==11.3.0",
    "posthog==5.4.0",
    "proto-plus==1.26.1",
    "protobuf==6.32.0",
    "pyasn1==0.6.1",
    "pyasn1_modules==0.4.2",
    "pybase64==1.4.2",
    "pydantic==2.11.7",
    "pydantic_core==2.33.2",
    "Pygments==2.19.2",
    "PyPika==0.48.9",
    "pyproject_hooks==1.2.0",
    "python-dateutil==2.9.0.post0",
    "python-dotenv==1.1.1",
    "PyYAML==6.0.2",
    "referencing==0.36.2",
    "regex==2025.9.1",
    "requests==2.32.5",
    "requests-oauthlib==2.0.0",
    "requests-toolbelt==1.0.0",
    "rich==14.1.0",
    "rpds-py==0.27.1",
    "rsa==4.9.1",
    "safetensors==0.6.2",
    "scikit-learn==1.7.2",
    "scipy==1.16.1",
    "sentence-transformers==5.1.0",
    "setuptools==80.9.0",
    "shellingham==1.5.4",
    "six==1.17.0",
    "sniffio==1.3.1",
    "SQLAlchemy==2.0.43",
    "starlette==0.45.3",
    "sympy==1.14.0",
    "tenacity==9.1.2",
    "threadpoolctl==3.6.0",
    "tiktoken==0.11.0",
    "tokenizers==0.22.0",
    "torch==2.8.0",
    "tqdm==4.67.1",
    "transformers==4.56.1",
    "typer==0.17.4",
    "typing-inspection==0.4.1",
    "typing_extensions==4.15.0",
    "urllib3==2.5.0",
    "uvicorn==0.35.0",
    "watchfiles==1.1.0",
    "websocket-client==1.8.0",
    "websockets==15.0.1",
    "wrapt==1.17.3",
    "zipp==3.23.0",
    "zstandard==0.24.0",
    "PyPDF2>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "black>=23.12.1",
    "flake8>=6.1.0",
    "isort>=5.13.2",
    "mypy>=1.8.0",
    "pylint>=3.0.3",
    "pre-commit>=3.6.0",
    "jupyter>=1.0.0",
    "memory-profiler>=0.61.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
]
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.2",
]
test = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "responses>=0.24.1",
    "httpx>=0.28.1",
]
performance = [
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
    "locust>=2.17.0",
]

[project.urls]
Homepage = "https://github.com/your-username/rag-assistant"
Documentation = "https://rag-assistant.readthedocs.io/"
Repository = "https://github.com/your-username/rag-assistant.git"
Issues = "https://github.com/your-username/rag-assistant/issues"
Changelog = "https://github.com/your-username/rag-assistant/blob/main/CHANGELOG.md"

[project.scripts]
rag-web = "magic_research.web_app:main"
rag-cli = "magic_research.app:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["magic_research*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"magic_research" = ["templates/*.html", "templates/*.css", "templates/*.js", "static/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["magic_research"]
known_third_party = ["chromadb", "langchain", "fastapi", "sentence_transformers"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "embedding: marks tests that require embedding models",
    "llm: marks tests that require LLM API calls",
]

# pytest-cov configuration
[tool.coverage.run]
source = ["src/magic_research"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "sentence_transformers.*",
    "PyPDF2.*",
]
ignore_missing_imports = true

# pylint configuration
[tool.pylint.messages_control]
disable = [
    "C0330",  # Wrong hanging indentation before block (black compatibility)
    "C0326",  # No space allowed (black compatibility)
]

[tool.pylint.format]
max-line-length = "88"

# bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (common in tests)

# ruff configuration (alternative to flake8)
[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

# Additional development tools configuration
[tool.vulture]
exclude = ["venv/", ".venv/", "build/", "dist/"]
ignore_decorators = ["@app.route", "@pytest.fixture"]
ignore_names = ["_*", "setUp*", "tearDown*"]
min_confidence = 80